[1mdiff --git a/client/src/App.jsx b/client/src/App.jsx[m
[1mindex e88a074..3c1e83a 100644[m
[1m--- a/client/src/App.jsx[m
[1m+++ b/client/src/App.jsx[m
[36m@@ -25,13 +25,14 @@[m [mfunction App() {[m
     setInitial(false);[m
 [m
     try {[m
[32m+[m[32m      console.log('here3');[m
       const response = await fetch('http://127.0.0.1:5000/query', {[m
         method: 'POST',[m
         headers: { 'Content-Type': 'application/json' },[m
         body: JSON.stringify({ query }),[m
       });[m
[31m-[m
       const data = await response.json();[m
[32m+[m[41m    [m
       if (data.result) {[m
         setMessages((prev) => [...prev, { sender: 'bot', text: data.result.result }]);[m
       } else {[m
[1mdiff --git a/server/app.py b/server/app.py[m
[1mindex 3d5a857..ff5cf1f 100644[m
[1m--- a/server/app.py[m
[1m+++ b/server/app.py[m
[36m@@ -3,6 +3,7 @@[m [mfrom flask_cors import CORS[m
 from rag import query_cypher[m
 from langchain.memory import ConversationBufferMemory[m
 from NER import build_patterns, extract_recipe_criteria[m
[32m+[m[32mfrom basicChatStructure import intent_parser, get_last_k_messages[m
 import asyncio[m
 [m
 app = Flask(__name__)[m
[36m@@ -16,6 +17,9 @@[m [mnlp = build_patterns() #create patterns for NER[m
 def test():[m
     return jsonify({"message": "Hello, from Flask!"})[m
 [m
[32m+[m[32m#decalres intent parser object[m[41m [m
[32m+[m[32mconservational_intent_parser = intent_parser()[m
[32m+[m
 @app.route('/query', methods=['POST'])[m
 async def query():[m
     user_query = request.json.get('query', '')[m
[36m@@ -24,33 +28,63 @@[m [masync def query():[m
     if not user_query:[m
         return jsonify({"error": "No query provided"}), 400[m
 [m
[31m-    # Initialize memory for this user if it doesn't exist[m
[32m+[m[32m    # Initialize memory for this user if it doesn't exist[m[41m [m
     if user_id not in user_memory:[m
         user_memory[user_id] = ConversationBufferMemory(memory_key="chat_history", return_messages=True)[m
 [m
     memory = user_memory[user_id][m
     memory.chat_memory.add_user_message(user_query)[m
 [m
[31m-    try:[m
[31m-        # Get lemmatized ingredients using NER[m
[31m-        doc = nlp(user_query)[m
[31m-        criteria = extract_recipe_criteria(doc)[m
[31m-        ingredients = criteria.get("ingredients", [])[m
[32m+[m[32m    #memory_pass = str(get_last_k_messages(memory))[m
[32m+[m[32m    global_intent = conservational_intent_parser.parse_global_user_intent(user_query)[m
[32m+[m[32m    print(global_intent)[m
[32m+[m
[32m+[m[32m    if global_intent.strip().lower() == 'greetings':[m
[32m+[m[32m        temp = conservational_intent_parser.respond_to_greeting(user_query)[m[41m [m
[32m+[m[32m        return jsonify({"result": {"result": temp}})[m
[32m+[m[32m    elif global_intent.strip().lower() == 'quit chat':[m
[32m+[m[32m        temp = conservational_intent_parser.respond_to_quit_chat(user_query)[m[41m [m
[32m+[m[32m        return jsonify({"result": {"result": temp}})[m
[32m+[m[32m    elif global_intent.strip().lower() == 'express gratitude':[m
[32m+[m[32m        temp = conservational_intent_parser.respond_to_gratitude(user_query)[m[41m [m
[32m+[m[32m        return jsonify({"result": {"result": temp}})[m
[32m+[m[32m    elif global_intent.strip().lower() == 'ask a question':[m
[32m+[m[32m        #print('entering question pipeline')[m
[32m+[m[32m        memory_pass = str(get_last_k_messages(memory))[m
[32m+[m[32m        temp = conservational_intent_parser.respond_to_question(memory_pass)[m
[32m+[m[32m        if temp.strip().lower() == 'non food related question':[m
[32m+[m[32m            #print('entering non food related')[m
[32m+[m[32m            temp = conservational_intent_parser.respond_to_NonFood_question(user_query)[m[41m [m
[32m+[m[32m            return jsonify({"result": {"result": temp}})[m
[32m+[m[32m        elif temp.strip().lower() == 'food related question':[m
[32m+[m[32m            #print('entering food related')[m
[32m+[m[32m            temp = conservational_intent_parser.respond_to_food_question(memory_pass)[m[41m [m
[32m+[m[32m            return jsonify({"result": {"result": temp}})[m
[32m+[m[32m    elif global_intent.strip().lower() == 'other':[m
[32m+[m[32m        temp = conservational_intent_parser.respond_to_other(user_query)[m
[32m+[m[32m        return jsonify({"result": {"result": temp}})[m
[32m+[m[41m        [m
[32m+[m[32m    else:[m
[32m+[m[32m        try:[m
[32m+[m[32m            # Get lemmatized ingredients using NER[m
[32m+[m[32m            doc = nlp(user_query)[m
[32m+[m[32m            criteria = extract_recipe_criteria(doc)[m
[32m+[m[32m            ingredients = criteria.get("ingredients", [])[m
 [m
[31m-        # Await the async query_cypher function[m
[31m-        chat_history_msgs = memory.load_memory_variables({})["chat_history"][m
[31m-        chat_history_str = "\n".join([msg.content for msg in chat_history_msgs])[m
[31m-        question_with_memory = chat_history_str + f"\nUser: {user_query}"[m
[32m+[m[32m            # Await the async query_cypher function[m
[32m+[m[32m            chat_history_msgs = memory.load_memory_variables({})["chat_history"][m
[32m+[m[32m            chat_history_str = "\n".join([msg.content for msg in chat_history_msgs])[m
[32m+[m[32m            question_with_memory = chat_history_str + f"\nUser: {user_query}"[m
 [m
[31m-        result = await query_cypher({"query": question_with_memory})[m
[32m+[m[32m            result = await query_cypher({"query": question_with_memory})[m
 [m
[31m-        # Save AI response to memory[m
[31m-        memory.chat_memory.add_ai_message(str(result))[m
[32m+[m[32m            # Save AI response to memory[m
[32m+[m[32m            memory.chat_memory.add_ai_message(str(result))[m
 [m
[31m-        return jsonify({"result": result})[m
[31m-    except Exception as e:[m
[31m-        app.logger.error(f"Error: {e}")[m
[31m-        return jsonify({"error": str(e)}), 500[m
[32m+[m[32m            return jsonify({"result": result})[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            app.logger.error(f"Error: {e}")[m
[32m+[m[32m            return jsonify({"error": str(e)}), 500[m
 [m
 if __name__ == '__main__':[m
     app.run(debug=True, port=8080, use_reloader=False)[m
[1mdiff --git a/server/basicChatStructure.py b/server/basicChatStructure.py[m
[1mindex 3277d59..6ba169c 100644[m
[1m--- a/server/basicChatStructure.py[m
[1m+++ b/server/basicChatStructure.py[m
[36m@@ -4,12 +4,19 @@[m [mimport os[m
 import random[m
 from datetime import datetime[m
 import openai[m
[31m-from sentence_transformers import SentenceTransformer, util[m
[32m+[m[32m#from sentence_transformers import SentenceTransformer, util[m[41m[m
 import re[m
 import json[m
 [m
 client = OpenAI()[m
 [m
[32m+[m[32mdef get_last_k_messages(memory, k = 5):[m[41m[m
[32m+[m[32m    # Get the underlying messages[m[41m[m
[32m+[m[32m    messages = memory.chat_memory.messages[m[41m[m
[32m+[m[32m    # Safely slice the last k (or fewer) messages[m[41m[m
[32m+[m[32m    return messages[-k:] if k <= len(messages) else messages[m[41m[m
[32m+[m[41m[m
[32m+[m[41m[m
 def ask_openai(user_input, system_instruction, temperature=0.0):[m
     response = client.chat.completions.create([m
         model="gpt-4o-mini",[m
[36m@@ -23,12 +30,13 @@[m [mdef ask_openai(user_input, system_instruction, temperature=0.0):[m
 [m
 class intent_parser(object):[m
   def __init__(self):[m
[31m-    self.global_intents = ['Find a recipe', 'Find a restaurant', 'Quit Chat', 'None of the Above'] #we can add something to view previous chats here[m
[31m-    self.conversational_intents = ['Express Gratitude', 'Ask a Question', 'None of the Above'][m
[31m-    self.specific_intents = ['Find a healthy recipe', 'Find a recipe that includes certain ingredients', 'Find a recipe from a certain culture', 'None of the Above'][m
[31m-[m
[32m+[m[32m    self.global_intents = ['Find a recipe', 'Find a restaurant', 'Quit Chat', 'Greetings', 'Express Gratitude',[m[41m[m
[32m+[m[32m                           'Ask a Question', 'Other'][m[41m[m
[32m+[m[41m    [m
[32m+[m[32m    self.question_intent = ['Food Related Question', 'Non Food Related Question'][m[41m[m
[32m+[m[41m    [m
   def parse_global_user_intent(self, user_input):[m
[31m-    system_instruction = 'Please classify the user\'s intent into one of the following categories: ' + ', '.join(self.global_intents)[m
[32m+[m[32m    system_instruction = 'Please classify the user\'s intent into one of the following categories. Please provide only the option you choose: ' + ', '.join(self.global_intents)[m[41m[m
     global_intent = ask_openai(user_input, system_instruction)[m
 [m
     normalized_intents = [intent.lower() for intent in self.global_intents][m
[36m@@ -42,51 +50,56 @@[m [mclass intent_parser(object):[m
 [m
     intent_index = normalized_intents.index(normalized_response)[m
     return self.global_intents[intent_index][m
[31m-[m
[31m-  def parse_conversational_intent(self, user_input):[m
[31m-    system_instruction = 'Please classify the user\'s intent into one of the following categories: ' + ', '.join(self.conversational_intents)[m
[31m-    conversational_intent = ask_openai(user_input, system_instruction)[m
[31m-[m
[31m-    normalized_intents = [intent.lower() for intent in self.conversational_intents][m
[31m-    normalized_response = conversational_intent.strip().lower()[m
[31m-[m
[31m-    if normalized_response not in normalized_intents:[m
[31m-        conversational_intent = ask_openai(user_input, system_instruction, temperature=0.5)[m
[31m-        normalized_response = conversational_intent.strip().lower()[m
[31m-[m
[31m-    if normalized_response not in normalized_intents:[m
[31m-        return 'unknown'[m
[31m-[m
[31m-    intent_index = normalized_intents.index(normalized_response)[m
[31m-    return self.conversational_intents[intent_index][m
[31m-[m
[31m-  def parse_specific_intent(self, user_input):[m
[31m-    system_instruction = 'Please classify the user\'s intent into one of the following categories: ' + ', '.join(self.specific_intents)[m
[31m-    specific_intent = ask_openai(user_input, system_instruction)[m
[31m-[m
[31m-    normalized_intents = [intent.lower() for intent in self.specific_intents][m
[31m-    normalized_response = specific_intent.strip().lower()[m
[31m-[m
[31m-    if normalized_response not in normalized_intents:[m
[31m-        specific_intent = ask_openai(user_input, system_instruction, temperature=0.5)[m
[31m-        normalized_response = specific_intent.strip().lower()[m
[31m-[m
[31m-    if normalized_response not in normalized_intents:[m
[31m-        return 'unknown'[m
[31m-[m
[31m-    intent_index = normalized_intents.index(normalized_response)[m
[31m-    return self.specific_intents[intent_index][m
[31m-  def parse_ingredients(self, user_input):[m
[31m-    system_instruction = 'You will be presented with a user input. Your goal is to find any words that could be recipe ingredients in the input and return them in a comma seperated list. If you cannot find ingredients return []'[m
[31m-    ingredients = ask_openai(user_input, system_instruction)[m
[31m-    return ingredients[m
[31m-[m
[31m-  def parse_all_intents(self, user_input):[m
[31m-    global_intent = self.parse_global_user_intent(user_input)[m
[31m-    conversational_intent = self.parse_conversational_intent(user_input)[m
[31m-    specific_intent = self.parse_specific_intent(user_input)[m
[31m-[m
[31m-    return global_intent, conversational_intent, specific_intent[m
[32m+[m[41m  [m
[32m+[m[41m  [m
[32m+[m[32m  def respond_to_greeting(self, user_input): #async[m[41m[m
[32m+[m[32m    system_instruction = """You are a friendly assistant that can help users find recipes or resturnats.[m[41m [m
[32m+[m[32m    Please give a friendly response to this user greeting and let them know some of the things that you are able to do such as find a healhty recipe, find a recipe with certain ingredients,[m[41m [m
[32m+[m[32m    find a resturant, etc."""[m[41m[m
[32m+[m[32m    greeting_response = ask_openai(user_input, system_instruction)[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m    return greeting_response[m[41m[m
[32m+[m[41m  [m
[32m+[m[32m  def respond_to_quit_chat(self, user_input):[m[41m[m
[32m+[m[32m    system_instruction = """You are a friendly assistant that can help users find recipes or resturnats.[m[41m [m
[32m+[m[32m    The user has expressed that they are done with their current session. Please give them a kind farewell and let them know you are here to help for any future cooking needs"""[m[41m[m
[32m+[m[32m    quit_chat_response = ask_openai(user_input, system_instruction)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    return quit_chat_response[m[41m[m
[32m+[m[41m[m
[32m+[m[32m  def respond_to_gratitude(self, user_input):[m[41m[m
[32m+[m[32m    system_instruction = """You are a friendly assistant that can help users find recipes or resturnats.[m[41m [m
[32m+[m[32m    The user has expressed gratitude for your help. Please provide a friendly answer and let them know you can continue to help them or help them with any new food questions"""[m[41m[m
[32m+[m[32m    gratitude_response = ask_openai(user_input, system_instruction)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    return gratitude_response[m[41m[m
[32m+[m[32m  def respond_to_question(self, user_input):[m[41m[m
[32m+[m[32m    system_instruction = """You are an assistant that determines whether a user has asked a food related or non food related question.[m[41m [m
[32m+[m[32m    Please respond exactly Food Related Question or Non Food Related Question"""[m[41m[m
[32m+[m[32m    food_question_response = ask_openai(user_input, system_instruction)[m[41m[m
[32m+[m[32m    return food_question_response[m[41m[m
[32m+[m[41m  [m
[32m+[m[32m  def respond_to_food_question(self, user_input):[m[41m[m
[32m+[m[32m    system_instruction = """You are a friendly assistant that can help users answer food related questions.[m[41m [m
[32m+[m[32m    Please refer to the current user question and previous input to answer as accurately as possible.[m[41m [m
[32m+[m[32m    Only respond to the most recent user question and use previous input as context"""[m[41m[m
[32m+[m[32m    food_question_response = ask_openai(user_input, system_instruction)[m[41m[m
[32m+[m[32m    return food_question_response[m[41m[m
[32m+[m[41m    [m
[32m+[m[32m  def respond_to_NonFood_question(self, user_input):[m[41m[m
[32m+[m[32m    system_instruction = """You are a friendly assistant that can help users find recipes or resturnats.[m[41m [m
[32m+[m[32m    The user has asked a non food related question. Please let them know that unfortunately you cannot help with this as you are designed to only help with food related tasks"""[m[41m[m
[32m+[m[32m    NonFood_response = ask_openai(user_input, system_instruction)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    return NonFood_response[m[41m[m
[32m+[m[41m  [m
[32m+[m[32m  def respond_to_other(self, user_input):[m[41m[m
[32m+[m[32m    system_instruction = """You are a friendly assistant that can help users find recipes or resturnats.[m[41m [m
[32m+[m[32m    The user has given a response that is irrelevant to food. Please redirct the user by informing them that you are only trained for food related tasks."""[m[41m[m
[32m+[m[32m    other_response = ask_openai(user_input, system_instruction)[m[41m[m
[32m+[m[41m[m
[32m+[m[32m    return other_response[m[41m[m
[32m+[m[41m     [m
 [m
 class backup_IR(object):[m
     def __init__(self, backup_recipe_flat_file):[m
